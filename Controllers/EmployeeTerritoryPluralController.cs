// ----------------------------------------------------------------------------------
// <copyright company="Exesoft Inc.">
//	This code was generated by Instant Web API code automation software (https://www.InstantWebAPI.com)
//	Copyright Exesoft Inc. Â© 2019.  All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------

using InstantHelper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using NorthwindAPI.Models;
using NorthwindAPI.Services;
using System;
using System.Collections.Generic;
using System.Data;
using System.Dynamic;
using System.Threading.Tasks;

namespace NorthwindAPI.Controllers {
    
    
    // Uncomment the following line to use an API Key; change the value of the key in appSetting (X-API-Key)
    // [ApiKey()]
    [Route("EmployeeTerritoryPlural")]
    public class EmployeeTerritoryPluralController : ControllerBase {
        
        private IEmployeeTerritoryPluralBuilder _builder;
        
        public EmployeeTerritoryPluralController(IEmployeeTerritoryPluralBuilder builder) {
            _builder = builder;
        }
        
        [HttpGet("")]
        public async Task<IList<EmployeeTerritoryPluralModel>> GetEmployeeTerritoryPlurals() {

            return await _builder.GetEmployeeTerritoryPlurals()?.ToListAsync();
        }
        
        [HttpGet("Display")]
        public IList<ExpandoObject> GetDisplayModels() {
            //List all model properties that should be displayed
            //Here only a couple have been added as an example
            var propNames = new List<string>();
            propNames.Add(nameof(EmployeeTerritoryPluralModel.EmployeeID));
            propNames.Add(nameof(EmployeeTerritoryPluralModel.TerritoryID));

            return _builder.GetDisplayModels(propNames);
        }
        
        [HttpGet("Paged")]
        public async Task<IPagedList<EmployeeTerritoryPluralModel>> Paged(int pageIndex, int pageSize) {

            var models = await _builder.GetEmployeeTerritoryPlurals()?.ToListAsync();

            return models.ToPagedList(pageIndex, pageSize, 0, models.Count);
        }
        
        [HttpGet("{employeeID}/{territoryID}")]
        public async Task<ActionResult> GetEmployeeTerritoryPlural_ByEmployeeIDTerritoryID(int employeeID, string territoryID) {

             var response = await _builder.GetEmployeeTerritoryPlural_ByEmployeeIDTerritoryID(employeeID, territoryID);
            if (response.RequestMessage != null) {
              return BadRequest(response.RequestMessage);
            }

            return Ok(response.Model);
        }
        
        [HttpGet("GetEmployeeTerritoryPlural_ByEmployeeID/{employeeID}")]
        public async Task<IList<EmployeeTerritoryPluralModel>> GetEmployeeTerritoryPlural_ByEmployeeID(int employeeID) {

            return await _builder.GetEmployeeTerritoryPlural_ByEmployeeID(employeeID)?.ToListAsync();
        }
        
        [HttpGet("GetEmployeeTerritoryPlural_ByTerritoryID/{territoryID}")]
        public async Task<IList<EmployeeTerritoryPluralModel>> GetEmployeeTerritoryPlural_ByTerritoryID(string territoryID) {

            return await _builder.GetEmployeeTerritoryPlural_ByTerritoryID(territoryID)?.ToListAsync();
        }
        
        [HttpPost("")]
        public async Task<ActionResult> AddEmployeeTerritoryPlural([FromBody]EmployeeTerritoryPluralModel model) {

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }

            var response = await _builder.AddEmployeeTerritoryPlural(model);
            if (response.ErrorMessage != null) {
              return BadRequest($"Error for {nameof(AddEmployeeTerritoryPlural)}; {response.ErrorMessage}");
            }

            if (response.RequestMessage != null) {
              return BadRequest(response.RequestMessage);
            }

            return CreatedAtAction("GetEmployeeTerritoryPlural_ByEmployeeIDTerritoryID", new {employeeID = ((EmployeeTerritoryPluralModel)response.Model).EmployeeID, territoryID = ((EmployeeTerritoryPluralModel)response.Model).TerritoryID}, response.Model);
        }
        
        [HttpPut("")]
        public async Task<ActionResult> UpdateEmployeeTerritoryPlural([FromBody]EmployeeTerritoryPluralModel model) {

            if (!ModelState.IsValid) {
              return BadRequest(ModelState);
            }
            var response = await _builder.UpdateEmployeeTerritoryPlural(model);
            if (response.ErrorMessage != null) {
              return BadRequest($"Error for {nameof(UpdateEmployeeTerritoryPlural)}; {response.ErrorMessage}");
            }

            if (response.RequestMessage != null) {
              return BadRequest(response.RequestMessage);
            }

            return StatusCode(response.StatusCode);
        }
        
        [HttpDelete("{employeeID}/{territoryID}")]
        public async Task<ActionResult> DeleteEmployeeTerritoryPlural(int employeeID, string territoryID) {

            var response = await _builder.DeleteEmployeeTerritoryPlural(employeeID, territoryID);
            if (response.ErrorMessage != null) {
              return BadRequest($"Error for {nameof(DeleteEmployeeTerritoryPlural)}; {response.ErrorMessage}");
            }

            if (response.RequestMessage != null) {
              return BadRequest(response.RequestMessage);
            }

            return StatusCode(response.StatusCode);
        }
    }
}

